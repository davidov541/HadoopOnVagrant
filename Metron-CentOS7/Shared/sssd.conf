[sssd]

# add comma separated list of domains -- be sure case matches the domain section added below
domains = AD.DAVIDMCGINNIS.NET

# leave this value at 2
config_file_version = 2

# nss is needed for group /identity lookups, pam needed for SSH authentication as AD user account
services = nss, pam

# set debug_level to 2 or 3 for normal operations or in 7-10 range for debugging
debug_level = 3


 
[pam]

# set debug_level to 2 or 3 for normal operations or in 7-10 range for debugging
debug_level = 3


 
[domain/AD.DAVIDMCGINNIS.NET]

# set debug_level to 2 or 3 for normal operations or in 7-10 range for debugging
debug_level = 3

# set all providers to Active Directory
id_provider = ad
access_provider = ad
chpass_provider = ad

# disable dynamic DNS updates
dyndns_update = False

realmd_tags = manages-system joined-with-samba

# cache credentials for offline logins
cache_credentials = True

# keep enumerate at false unless you know what you are doing -- this can place heavy load on AD and cluster servers
enumerate = False

# allow cached information to live for a day (default is 90 minutes)
entry_cache_timeout = 86400

# set min id threshold above local UIDs
min_id = 100000

# set default shell for users
default_shell = /bin/bash

# template for new user home directories created during first PAM login
fallback_homedir = /home/%u@%d

# disable use of fully qualified names, unless needed for your particular environment
use_fully_qualified_names = False

# AD domain name
ad_domain = AD.DAVIDMCGINNIS.NET

# list of AD servers
ad_server = ad.ad.davidmcginnis.net

# Kerberos servers -- probably same list as AD servers
krb5_server = ad.ad.davidmcginnis.net

# AD REALM info -- probably your AD domain in upper case
krb5_realm = AD.DAVIDMCGINNIS.NET

# allow Kerberos to store password if offline
krb5_store_password_if_offline = True

# LDAP URIs -- use ldap with port 389, or ldaps with port 636 + setup trusted certificate
ldap_uri = ldaps://ad.ad.davidmcginnis.net:636

# LDAP search base -- probably your top level domain
ldap_search_base = DC=AD,DC=DAVIDMCGINNIS,DC=NET

# LDAP user search base, set lower down LDAP tree and consider using filters as needed -- gather info with ldapsearch
ldap_user_search_base = OU=USERS,OU=NISSAN,OU=HADOOP,DC=AD,DC=DAVIDMCGINNIS,DC=NET

# LDAP group search base -- if Domain Users needed, set to root level -- otherwise set lower down the tree -- gather info with ldapsearch
ldap_group_search_base = DC=AD,DC=DAVIDMCGINNIS,DC=NET

# Use rfc2307bis or AD 
ldap_schema = rfc2307bis

# use Kerberos auth
ldap_sasl_mech = GSSAPI

# user object filter for AD
ldap_user_object_class = user

# group object filter for AD
ldap_group_object_class = group

# set to unixHomeDirectory
ldap_user_home_directory = unixHomeDirectory

# set to displayName
ldap_user_gecos = displayName

# LDAP UPN object filter
ldap_user_principal = userPrincipalName

# set to ad
ldap_account_expire_policy = ad

# force REALM name to upper case
ldap_force_upper_case_realm = true

# allow SSSD to perform ID mapping from SID/RID -> UID/GID
ldap_id_mapping = True

# TODO: I believe this is only necessary for larger AD forests where you have too many users for SSSD to handle by default. Should not need it for prototyping.
# set minimum id value
#ldap_idmap_range_min = 100000

# set max id value
#ldap_idmap_range_max = 2000100000

# define the range size (need multiple ranges)
#ldap_idmap_range_size = 20000000
